version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: multi-vendor-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: multi-vendor-service
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - multi-vendor-network

  # Redis Cache and Queue
  redis:
    image: redis:7.2-alpine
    container_name: multi-vendor-redis
    restart: unless-stopped
    ports:
      - "6379:6379" #your host port
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    networks:
      - multi-vendor-network

  # Main API Server
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: multi-vendor-api
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production #Your Environment
      PORT: 3000 #Your backend hosted port
      MONGODB_URI: mongodb://admin:password@mongodb:27017/multi-vendor-service?authSource=admin #Your monogoDB URI
      REDIS_URL: redis://:redispassword@redis:6379 #Your redis URI
      SYNC_VENDOR_RATE_LIMIT: 10 
      ASYNC_VENDOR_RATE_LIMIT: 5
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./logs:/app/logs
    networks:
      - multi-vendor-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: docker/Dockerfile
      target: production
    container_name: multi-vendor-worker
    restart: unless-stopped
    environment:
      NODE_ENV: production
      MONGODB_URI: mongodb://admin:password@mongodb:27017/multi-vendor-service?authSource=admin
      REDIS_URL: redis://:redispassword@redis:6379
      WORKER_CONCURRENCY: 5
    depends_on:
      - mongodb
      - redis
    command: node src/workers/jobProcessor.js
    volumes:
      - ./logs:/app/logs
    networks:
      - multi-vendor-network

  # Mock Sync Vendor
  mock-sync-vendor:
    build:
      context: .
      dockerfile: docker/Dockerfile.vendor
    container_name: mock-sync-vendor
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: production
      PORT: 3002
      VENDOR_TYPE: sync
    networks:
      - multi-vendor-network

  # Mock Async Vendor
  mock-async-vendor:
    build:
      context: .
      dockerfile: docker/Dockerfile.vendor
    container_name: mock-async-vendor
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: production
      PORT: 3003
      VENDOR_TYPE: async
      WEBHOOK_BASE_URL: http://api:3000
    depends_on:
      - api
    networks:
      - multi-vendor-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: multi-vendor-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.